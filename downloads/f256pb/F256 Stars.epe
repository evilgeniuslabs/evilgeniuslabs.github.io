{
  "name": "F256 Stars",
  "id": "iJLJmRscYDNooNoxn",
  "sources": {
    "main": "\n// Fibonacci Stars pattern by Jason Coon\n// For Fibonacci256: https://www.tindie.com/products/19429\n// Meant for use in this sketch: https://github.com/jasoncoon/esp8266-fastled-webserver/tree/fibonacci256\n\n// modified by Ben Hencke to run on Pixelblaze\n\nvar starCount = 5;\nvar starMagicNumbers = [8, 13, 21]\n\nvar fibonacciToPhysical = [ 0, 157, 78, 235, 118, 39, 196, 79, 236, 156, 40, 197, 117, 1, 158, 77, 234, 119, 38, 195, 80, 237, 155, 41, 198, 116, 2, 159, 76, 233, 120, 37, 194, 81, 238, 154, 42, 199, 115, 3, 160, 75, 232, 121, 36, 193, 82, 239, 153, 43, 200, 114, 4, 161, 74, 231, 122, 35, 192, 83, 240, 152, 44, 201, 113, 5, 162, 73, 230, 123, 34, 191, 84, 241, 151, 45, 202, 112, 6, 163, 72, 229, 124, 33, 190, 85, 242, 150, 46, 203, 111, 7, 164, 71, 228, 125, 32, 189, 86, 243, 149, 47, 204, 110, 8, 165, 70, 227, 126, 31, 188, 87, 244, 148, 48, 205, 109, 9, 166, 69, 226, 127, 30, 187, 88, 245, 147, 49, 206, 108, 10, 167, 68, 225, 128, 29, 186, 89, 246, 146, 50, 207, 107, 11, 168, 67, 224, 129, 28, 185, 90, 247, 145, 51, 208, 106, 12, 169, 66, 223, 130, 27, 184, 91, 248, 144, 52, 209, 105, 13, 170, 65, 222, 131, 26, 183, 92, 249, 143, 53, 210, 104, 14, 171, 64, 221, 132, 25, 182, 93, 250, 142, 54, 211, 103, 15, 172, 63, 220, 133, 24, 181, 94, 251, 141, 55, 212, 102, 16, 173, 62, 219, 134, 23, 180, 95, 252, 140, 56, 213, 101, 17, 174, 61, 218, 135, 22, 179, 96, 253, 139, 57, 214, 100, 18, 175, 60, 217, 136, 21, 178, 97, 254, 138, 58, 215, 99, 19, 176, 59, 216, 137, 20, 177, 98, 255 ]\nvar stars = array(starCount)\nvar moveTimer\nvar gHue = 0\nvar leds = array(pixelCount)\nvar hues = array(pixelCount)\nvar fade = 0.995\nvar moveTimerTarget = 90\n\nexport function sliderSpeed(v) {\n  v = 1-v\n  moveTimerTarget = 10 + (v*v)*190\n}\n\nexport function sliderFade(v) {\n  fade = (1-(v*v)) * .0999 + .9\n}\n\n\n//setup initial stars state\nstars.mutate(() => {\n  var offset = starMagicNumbers[random(starMagicNumbers.length)]\n  return [\n    randomInt(offset),\n    offset\n    ]\n})\n\n\nexport function beforeRender(delta) {\n  gHue = (gHue + delta/40) % 256\n  \n  \n  //only move the stars every so often\n  moveTimer += delta\n  if (moveTimer > moveTimerTarget) {\n    moveTimer -= moveTimerTarget\n    updateFibonacciStars()\n  }\n  \n  //fade to black\n  leds.mutate(v => v * fade)\n  \n  drawFibonacciStars()\n}\n\nexport function render2D(index, x, y) {\n  v = leds[index]\n  h = hues[index]/ 256\n  hsv(h, 1.75 - v, pow(v, 2))\n}\n\n\nfunction randomInt(n) {\n  return floor(random(n))\n}\n\n\nfunction updateFibonacciStars() {\n  stars.forEach((star) => {\n    // move the stars\n    star[0] += star[1]\n    \n    //reset any stars out of bounds\n    if (star[0] >= pixelCount) {\n      star[1] = starMagicNumbers[random(starMagicNumbers.length)]\n      star[0] = randomInt(star[1])\n    }\n  })\n}\n\nfunction drawFibonacciStars() {\n  stars.forEach((star) => {\n    var index = fibonacciToPhysical[star[0]];\n    // draw the star\n    leds[index] = 1\n    hues[index] = star[0] + gHue\n  });\n}\n"
  },
  "preview": "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"
}