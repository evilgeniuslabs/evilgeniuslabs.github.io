{
  "name": "F256 Pride",
  "id": "2a8A8mpierjEvTFHZ",
  "sources": {
    "main": "// Pride pattern\n// based on Pride2015 by Mark Kriegsman: https://gist.github.com/kriegsman/964de772d64c502760e5\n// modified by Ben Hencke and Jason Coon to run on Pixelblaze\n\nvar fibonacciToPhysical = [ 0, 98, 195, 49, 146, 243, 74, 171, 24, 122, 219, 50, 147, 244, 97, 194, 25, 123, 220, 73, 170, 1, 99, 196, 48, 145, 242, 75, 172, 23, 121, 218, 51, 148, 245, 96, 193, 26, 124, 221, 72, 169, 2, 100, 197, 47, 144, 241, 76, 173, 22, 120, 217, 52, 149, 246, 95, 192, 27, 125, 222, 71, 168, 3, 101, 198, 46, 143, 240, 77, 174, 21, 119, 216, 53, 150, 247, 94, 191, 28, 126, 223, 70, 167, 4, 102, 199, 45, 142, 239, 78, 175, 20, 118, 215, 54, 151, 248, 93, 190, 29, 127, 224, 69, 166, 5, 103, 200, 44, 141, 238, 79, 176, 19, 117, 214, 55, 152, 249, 92, 189, 30, 128, 225, 68, 165, 6, 104, 201, 43, 140, 237, 80, 177, 18, 116, 213, 56, 153, 250, 91, 188, 31, 129, 226, 67, 164, 7, 105, 202, 42, 139, 236, 81, 178, 17, 115, 212, 57, 154, 251, 90, 187, 32, 130, 227, 66, 163, 8, 106, 203, 41, 138, 235, 82, 179, 16, 114, 211, 58, 155, 252, 89, 186, 33, 131, 228, 65, 162, 9, 107, 204, 40, 137, 234, 83, 180, 15, 113, 210, 59, 156, 253, 88, 185, 34, 132, 229, 64, 161, 10, 108, 205, 39, 136, 233, 84, 181, 14, 112, 209, 60, 157, 254, 87, 184, 35, 133, 230, 63, 160, 11, 109, 206, 38, 135, 232, 85, 182, 13, 111, 208, 61, 158, 255, 86, 183, 36, 134, 231, 62, 159, 12, 110, 207, 37 ]\n\n// beatsin8( BPM, uint8_t low, uint8_t high) returns an 8-bit value that\n// rises and falls in a sine wave, 'BPM' times per minute,\n// between the values of 'low' and 'high'.\nfunction beatsin8(bpm, low, high) {\n  return wave(time(0.91552734375/bpm)) * (high - low) + low\n}\n\nfunction beatsin88(bpm, low, high) {\n  return beatsin8(bpm>>8, low, high);\n}\n\nvar sPseudotime = 0; //was uint16_t modified to be a value between 0 and 1\n// var sLastMillis = 0; //uint16_t\nexport var sHue16 = 0; //was uint16_t seems to work fine as-is\nexport var ledarray = array(pixelCount*3);\n\nfunction pride(deltams, useFibonacciOrder) {\n  var sat8 = beatsin88( 43.5, 220, 250); //uint8_t\n  // var brightdepth = beatsin88( 341, 96, 224); //uint8_t\n  var brightdepth = beatsin88(171, 96, 224); //uint8_t\n  // var brightnessthetainc16 = beatsin88( 203, (25 * 256), (40 * 256)); //uint16_t\n  var brightnessthetainc16 = beatsin88( 102, (25 * 256), (40 * 256)); //uint16_t\n  // var msmultiplier = beatsin88(147, 23, 60); //uint8_t\n  var msmultiplier = beatsin88(74, 23, 60); //uint8_t\n\n  var hue16 = sHue16;//gHue * 256; //uint16_t\n  // var hueinc16 = beatsin88(113, 300, 1500); //uint16_t\n  // var hueinc16 = beatsin88(57, 1, 128); //uint16_t\n  var hueinc16 = beatsin88(57, 1, 128); //varies a bit more\n\n  // var ms = millis(); //uint16_t\n  // var deltams = ms - sLastMillis ; //uint16_t\n  // sLastMillis  = ms;\n  sPseudotime += (deltams * msmultiplier) >>16;\n  // sHue16 += deltams * beatsin88( 400, 5, 9);\n  sHue16 += deltams * beatsin88( 200, 5, 9);\n  var brightnesstheta16 = sPseudotime; //uint16_t\n\n  for ( var i = 0 ; i < pixelCount; i++) { //uint16_t\n    hue16 += hueinc16;\n    var hue8 = hue16 / 256; //uint8_t\n    //this is doing a triangle\n    var h16_128 = hue16 >> 7; //uint16_t\n    if ( h16_128 & 0x100) {\n      hue8 = 255 - (h16_128 >> 1);\n    } else {\n      hue8 = h16_128 >> 1;\n    }\n\n    brightnesstheta16  += brightnessthetainc16>>16;\n    brightnesstheta16 = mod(brightnesstheta16 + (brightnessthetainc16>>16), 1)\n    var b16 = wave( brightnesstheta16); //uint16_t\n\n    //var bri16 = (uint32_t)((uint32_t)b16 * (uint32_t)b16) / 65536; //uint16_t\n    var bri16 = b16 * b16\n    //var bri8 = (uint32_t)(((uint32_t)bri16) * brightdepth) / 65536; //uint8_t\n    var bri8 = bri16 * (brightdepth>>8)\n    bri8 += (1 - (brightdepth>>8));\n\n    var index = hue8; //uint8_t\n    //index = triwave8( index);\n    index = index/256 * 240;\n\n    // CRGB newcolor = ColorFromPalette( palette, index, bri8);\n\n    var pixelnumber = useFibonacciOrder ? fibonacciToPhysical[i] : i; //uint16_t\n\n    // nblend( ledarray[pixelnumber], newcolor, 8);\n    //TODO palletes, blending in RGB. For now use the 3 byte pixel for hue and value\n    ledarray[pixelnumber*3] = hue8 / 128;\n    ledarray[pixelnumber*3 + 1] = sat8 / 128;\n    ledarray[pixelnumber*3 + 2] = bri8;\n  }\n}\n\nexport function beforeRender(delta) {\n  pride(delta, 1)\n}\n\nexport function render(index) {\n  v = ledarray[index*3+2]\n  hsv(ledarray[index*3], ledarray[index*3+1], v*v)\n}"
  },
  "preview": "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"
}